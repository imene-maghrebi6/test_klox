[{"D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\index.js":"1","D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\App.js":"2","D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\reportWebVitals.js":"3","D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\components\\autoSelect.js":"4","D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\pages\\characters.js":"5","D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\components\\listCharacter.js":"6","D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\components\\Character.js":"7"},{"size":756,"mtime":1607704237674,"results":"8","hashOfConfig":"9"},{"size":528,"mtime":1606492309565,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1606492309565,"results":"11","hashOfConfig":"9"},{"size":1312,"mtime":1607705495446,"results":"12","hashOfConfig":"9"},{"size":1229,"mtime":1607705553530,"results":"13","hashOfConfig":"9"},{"size":932,"mtime":1607705666198,"results":"14","hashOfConfig":"9"},{"size":1276,"mtime":1607705162587,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"vmsfh4",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\index.js",["32","33"],"D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\App.js",[],"D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\reportWebVitals.js",[],["34","35"],"D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\components\\autoSelect.js",["36"],"D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\pages\\characters.js",["37"],"import React, {useEffect, useState} from 'react';\r\nimport AutoSelect from '../components/autoSelect';\r\nimport ListCharacters from './../components/listCharacter';\r\nimport axios from 'axios'\r\n\r\nconst Characters = () => {\r\n\r\n    const [episodes, setEpisodes] = useState([])\r\n    const [selectedEpisode, setSelectedEpisode] = useState({})\r\n\r\n    useEffect(async() => {\r\n\r\n      const result = await axios.post(\r\n        'https://rickandmortyapi.com/graphql',\r\n        {\r\n            query: `\r\n            query {\r\n                episodes\r\n                    {results\r\n                        {id, name, episode, characters {id, name, species,image}}}\r\n              }`\r\n        }\r\n\r\n      )\r\n      setEpisodes(result.data.data.episodes.results)\r\n    }, [])\r\n\r\n    console.log('episodes', episodes)\r\n\r\n    const handleEpisodeChange = (episodeId) => {\r\n      const episode = episodes.find(episode => episode.id === episodeId)\r\n      console.log('episode', episode)\r\n      setSelectedEpisode(episode)\r\n    }\r\n    return (\r\n        <>\r\n          <AutoSelect episodes={episodes} callback={handleEpisodeChange}/>\r\n          <ListCharacters selectedEpisode={selectedEpisode} />\r\n      \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Characters","D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\components\\listCharacter.js",[],"D:\\Users\\imene\\Desktop\\Imene\\Master\\test_klox\\test_klox\\test_klox\\src\\components\\Character.js",[],{"ruleId":"38","severity":1,"message":"39","line":5,"column":10,"nodeType":"40","messageId":"41","endLine":5,"endColumn":24},{"ruleId":"38","severity":1,"message":"42","line":9,"column":7,"nodeType":"40","messageId":"41","endLine":9,"endColumn":13},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"38","severity":1,"message":"47","line":5,"column":8,"nodeType":"40","messageId":"41","endLine":5,"endColumn":22},{"ruleId":"48","severity":1,"message":"49","line":11,"column":15,"nodeType":"50","endLine":26,"endColumn":6},"no-unused-vars","'ApolloProvider' is defined but never used.","Identifier","unusedVar","'client' is assigned a value but never used.","no-native-reassign",["51"],"no-negated-in-lhs",["52"],"'FormHelperText' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]